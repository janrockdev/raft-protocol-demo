modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Distributed Cache Cluster"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Cache Dashboard"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Fixed Cache Cluster"

[[workflows.workflow]]
name = "Distributed Cache Cluster"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python start_cluster.py"
waitForPort = 3000

[[workflows.workflow]]
name = "Cache Dashboard"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python simple_dashboard.py"
waitForPort = 8080

[[workflows.workflow]]
name = "Fixed Cache Cluster"
author = "agent"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = '''
python -c "
import asyncio
import subprocess
import sys
import time
import signal
from config import NODES

class SimpleClusterManager:
    def __init__(self):
        self.processes = []
        
    def start_cluster(self):
        print('Starting 5-node cluster with fixed HTTP binding...')
        
        for node_id in NODES.keys():
            try:
                cmd = [sys.executable, 'main.py', node_id]
                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
                self.processes.append(process)
                print(f'Started {node_id} (PID: {process.pid})')
                time.sleep(3)  # Longer delay for proper HTTP binding
            except Exception as e:
                print(f'Failed to start {node_id}: {e}')
                return False
                
        print(f'All {len(self.processes)} nodes started successfully!')
        return True
        
    def cleanup(self):
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=3)
            except:
                process.kill()
                
    def signal_handler(self, signum, frame):
        self.cleanup()
        sys.exit(0)

manager = SimpleClusterManager()
signal.signal(signal.SIGINT, manager.signal_handler)
signal.signal(signal.SIGTERM, manager.signal_handler)

try:
    if manager.start_cluster():
        print('\nCluster running. Press Ctrl+C to stop.')
        while True:
            time.sleep(1)
except KeyboardInterrupt:
    print('\nShutting down cluster...')
finally:
    manager.cleanup()
"'''
waitForPort = 3000

[deployment]
run = ["sh", "-c", "python start_cluster.py"]

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 4000
externalPort = 3000

[[ports]]
localPort = 5000
externalPort = 5000

[[ports]]
localPort = 6000
externalPort = 6000

[[ports]]
localPort = 7000
externalPort = 3001

[[ports]]
localPort = 8080
externalPort = 8080
